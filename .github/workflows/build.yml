name: Build Wheels

on:
  push:
    branches:
      - main
    tags:
      - 'v_main'

# on:
#   push:
#     branches:
#       - main  # 推送到 main 分支时触发
#on: [push, pull_request] # 触发条件：当有 push 或 pull_request 时运行 

jobs:
  build:
    runs-on: ubuntu-20.04  # 使用最新的 Ubuntu 环境
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]  # 支持的 Python 版本
    steps:
      # 1. 检出代码
      - uses: actions/checkout@v3


      - name: Install Miniconda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH

      - name: Install CUDA toolkit with conda
        run: |
          conda install  -c conda-forge cudatoolkit=11.2
      
      - name: Set CUDA environment variables
        run: |
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/miniconda/lib" >> $GITHUB_ENV
          echo "CUDA_HOME=$HOME/miniconda" >> $GITHUB_ENV

      # 2. 设置 Python 环境
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf
          

      - name: Debug environment
        run: |
          python -m pip list
          which python
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done

  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-${{ matrix.python-version }}
  #         path: dist/

  # publish:
  #   runs-on: ubuntu-20.04
  #   needs: build
  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist/

  #     - name: Combine artifacts
  #       run: |
  #         mkdir -p combined_dist
  #         find dist/ -type f -name "*.whl" -exec cp {} combined_dist/ \;
  #         find dist/ -type f -name "*.tar.gz" -exec cp {} combined_dist/ \;

      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist
