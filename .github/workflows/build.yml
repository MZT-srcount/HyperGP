name: Build Wheels

on:
  push:
    branches:
      - main
    tags:
      - 'v_main'

# on:
#   push:
#     branches:
#       - main  # 推送到 main 分支时触发
#on: [push, pull_request] # 触发条件：当有 push 或 pull_request 时运行 

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - name: Install compatible gcc version
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-8 g++-8
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8
          gcc --version  # 检查 gcc 版本

      - name: Set up CUDA
        uses: Jimver/cuda-toolkit@v0.2.19
        id: cuda-toolkit
        with:
          cuda: '11.2.2'  # 根据你的需求指定 CUDA 版本
  cp309:
    needs:setup
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Check CUDA installation 1
        run: |
          which nvcc            # 检查 nvcc 是否在 PATH 中
          nvcc --version        # 检查 nvcc 版本
          ls /usr/local
      - name: Set up Python 309
        uses: actions/setup-python@v4
        with:
          python-version: 3.09
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf

      - name: Debug environment
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip list
          which python
          ls usr/local
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done
      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist

  cp310:
    needs:setup
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf

      - name: Debug environment
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip list
          which python
          ls usr/local
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done
      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist
  cp311:
    needs:setup
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Check CUDA installation 1
        run: |
          which nvcc            # 检查 nvcc 是否在 PATH 中
          nvcc --version        # 检查 nvcc 版本
          ls /usr/local
      - name: Set up Python 311
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf

      - name: Debug environment
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip list
          which python
          ls usr/local
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done
      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist
  cp312:
    needs:setup
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Check CUDA installation 1
        run: |
          which nvcc            # 检查 nvcc 是否在 PATH 中
          nvcc --version        # 检查 nvcc 版本
          ls /usr/local
      - name: Set up Python 312
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf

      - name: Debug environment
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip list
          which python
          ls usr/local
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done
      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist
  cp313:
    needs:setup
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Check CUDA installation 1
        run: |
          which nvcc            # 检查 nvcc 是否在 PATH 中
          nvcc --version        # 检查 nvcc 版本
          ls /usr/local
      - name: Set up Python 313
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf
      # 3. 安装构建工具
      - name: Install dependencies
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip install --upgrade pip
          python -m pip install --force-reinstall build auditwheel scikit-build pybind11 patchelf

      - name: Debug environment
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python -m pip list
          which python
          ls usr/local
          python -c "import skbuild; print(skbuild.__version__)"
          
      - name: Clean build directories
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          rm -rf _skbuild/ dist/ build/

     # 4. 构建 wheel 文件
      - name: Build wheel
        env:
          LOCAL_VERSION: 1  # 设置本地版本号
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          python ./setup.py bdist_wheel #sdist
          mv dist wheelhouse
          
      # 5. 使用 auditwheel 修复 wheel 文件
      - name: Repair wheel with auditwheel
        run: |
          # source $HOME/miniconda/etc/profile.d/conda.sh  # 加载 Conda
          # conda activate base  # 激活 base 环境
          mkdir -p dist
          for whl in wheelhouse/*.whl; do
            auditwheel repair "$whl" --wheel-dir dist/ --plat manylinux_2_24_x86_64
          done

          # python_version=$(python -c "import sys; print(f'py{sys.version_info.major}{sys.version_info.minor}')")
          # for gz in wheelhouse/*.tar.gz; do
          #   new_name=$(echo "$gz" | sed "s/.tar.gz/-${python_version}.tar.gz/")
          #   mv "$gz" "$new_name"
          # done
          
          # for gz in wheelhouse/*.tar.gz; do
          #   mv "$gz" dist/
          # done
      # # 9. 发布到 PyPI
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist